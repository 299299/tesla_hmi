$#include "Math/Matrix4.h"

class Matrix4
{
    Matrix4();
    Matrix4(const Matrix4& matrix);
    Matrix4(const Matrix3& matrix);
    Matrix4(float v00, float v01, float v02, float v03,
            float v10, float v11, float v12, float v13,
            float v20, float v21, float v22, float v23,
            float v30, float v31, float v32, float v33);
    ~Matrix4();

    bool operator ==(const Matrix4& rhs) const;

    Vector3 operator * (const Vector3& rhs) const;
    Vector4 operator * (const Vector4& rhs) const;

    Matrix4 operator + (const Matrix4& rhs) const;
    Matrix4 operator - (const Matrix4& rhs) const;

    Matrix4 operator * (float rhs) const;
    Matrix4 operator * (const Matrix4& rhs) const;
    Matrix4 operator * (const Matrix3x4& rhs) const;

    void SetTranslation(const Vector3& translation);
    void SetRotation(const Matrix3& rotation);
    void SetScale(const Vector3& scale);
    void SetScale(float scale);

    Matrix3 ToMatrix3() const;
    Matrix3 RotationMatrix() const;
    Vector3 Translation() const;
    Quaternion Rotation() const;
    Vector3 Scale() const;
    Matrix4 Transpose() const;

    bool Equals(const Matrix4& rhs) const;
    void Decompose(Vector3& translation, Quaternion& rotation, Vector3& scale) const;

    Matrix4 Inverse() const;

    String ToString() const;

    float m00_ @ m00;
    float m01_ @ m01;
    float m02_ @ m02;
    float m03_ @ m03;
    float m10_ @ m10;
    float m11_ @ m11;
    float m12_ @ m12;
    float m13_ @ m13;
    float m20_ @ m20;
    float m21_ @ m21;
    float m22_ @ m22;
    float m23_ @ m23;
    float m30_ @ m30;
    float m31_ @ m31;
    float m32_ @ m32;
    float m33_ @ m33;

    static const Matrix4 ZERO;
    static const Matrix4 IDENTITY;
};

